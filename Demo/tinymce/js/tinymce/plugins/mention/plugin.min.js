/**
 * TinyMCE version 7 Mention Plugin
 * Debug version to troubleshoot issues
 * Author: TimotejZavski
 */

(function () {
  'use strict';

  var global = tinymce.util.Tools.resolve('tinymce.PluginManager');

  // Citation utility functions
  var formatDateAPA = function(dateString) {
    const date = new Date(dateString);
    return date.toLocaleDateString('en-US', {
        year: 'numeric',
        month: 'long',
        day: 'numeric'
    });
  };

  var formatDateHarvard = function(dateString) {
    const date = new Date(dateString);
    return date.toLocaleDateString('en-GB', {
        day: 'numeric',
        month: 'long',
        year: 'numeric'
    });
  };

  // APA citation functions
  var generateAPACitation = function(item) {
    let citation = '';
    const authors = item.author.split(',');
    let authorFormatted = '';
    
    // Get the title from either title or name property
    const title = item.title || item.name || '';
    
    // Format authors according to APA7
    if (authors.length === 1) {
        const parts = authors[0].trim().split(' ');
        const lastName = parts[parts.length - 1];
        const initials = parts.slice(0, -1).map(name => name[0] + '.').join(' ');
        authorFormatted = `${lastName}, ${initials}`;
    } else {
        authorFormatted = authors.map(author => {
            const parts = author.trim().split(' ');
            const lastName = parts[parts.length - 1];
            const initials = parts.slice(0, -1).map(name => name[0] + '.').join(' ');
            return `${lastName}, ${initials}`;
        }).join(', ');
    }
    
    // Ensure year is properly formatted
    const year = item.year && item.year !== 'undefined' ? `(${item.year})` : '(n.d.)';
    
    switch(item.sourceType) {
        case 'article':
            citation = `${authorFormatted} ${year}. ${title}. <em>${item.publisher}</em>, ${item.letnik || item.volume || ''}`;
            if (item.straniclanka || item.pages) {
                citation += `, ${item.straniclanka || item.pages}`;
            }
            citation += '.';
            break;
            
        case 'book':
            citation = `${authorFormatted} ${year}. <em>${title}</em>`;
            if (item.edition) {
                if (!item.edition.toLowerCase().includes('edition')) {
                    citation += ` (${item.edition} ed.)`;
                } else {
                    citation += ` (${item.edition})`;
                }
            }
            citation += `. ${item.publisher}.`;
            break;
            
        case 'conference':
            citation = `${authorFormatted} ${year}. ${title}. In <em>${item.publisher}</em>`;
            if (item.url) {
                citation += `. ${item.url}`;
            }
            citation += '.';
            break;
            
        case 'website':
            citation = `${authorFormatted} ${year}. ${title}. ${item.websiteOrganization}. `;
            if (item.lastAccessed) {
                const retrievedDate = formatDateAPA(item.lastAccessed);
                citation += `Retrieved ${retrievedDate}`;
                if (item.url) {
                    citation += `, from ${item.url}`;
                }
            }
            citation += '.';
            break;
            
        case 'report':
            citation = `${authorFormatted} ${year}. ${title}`;
            if (item.reportNumber) {
                citation += ` (Report No. ${item.reportNumber})`;
            }
            citation += `. ${item.publisher}.`;
            break;
            
        default:
            citation = `${authorFormatted} ${year}. ${title}.`;
    }
    
    return citation;
  };

  var generateShortAPACitation = function(item) {
    const authors = item.author.split(',');
    let citation = '';
    
    if (authors.length === 1) {
        const parts = authors[0].trim().split(' ');
        citation = parts[parts.length - 1];
    } else if (authors.length === 2) {
        const author1 = authors[0].trim().split(' ').pop();
        const author2 = authors[1].trim().split(' ').pop();
        citation = `${author1} & ${author2}`;
    } else {
        citation = authors[0].trim().split(' ').pop() + ' et al.';
    }
    
    const shortCitation = `${citation}, ${item.year}`;
    return shortCitation;
  };

  // Harvard citation functions
  var generateHarvardCitation = function(item) {
    const authors = item.author.split(',');
    let authorText = '';
    
    if (authors.length === 1) {
        const nameParts = authors[0].trim().split(' ');
        const lastName = nameParts.pop();
        const initials = nameParts.map(name => `${name.charAt(0)}.`).join('');
        authorText = `${lastName}, ${initials}`;
    } else {
        authorText = authors.map(author => {
            const nameParts = author.trim().split(' ');
            const lastName = nameParts.pop();
            const initials = nameParts.map(name => `${name.charAt(0)}.`).join('');
            return `${lastName}, ${initials}`;
        }).join(', ');
    }
    
    let citation = '';
    
    switch(item.sourceType) {
        case 'article':
            citation = `${authorText} (${item.year}) '${item.title}', <em>${item.publisher}</em>, ${item.volume || item.letnik}, pp. ${item.pages || item.straniclanka}.`;
            if (item.doi) {
                citation += ` doi: ${item.doi}`;
            }
            break;
            
        case 'book':
            citation = `${authorText} (${item.year}) <em>${item.title}</em>. ${item.edition ? item.edition + '. ' : ''}${item.publisher}.`;
            if (item.isbn) {
                citation += ` ISBN: ${item.isbn}`;
            }
            break;
            
        case 'conference':
            citation = `${authorText} (${item.year}) '${item.title}', <em>${item.publisher}</em>.`;
            if (item.url) {
                citation += ` Available at: ${item.url}`;
            }
            if (item.doi) {
                citation += ` doi: ${item.doi}`;
            }
            break;
            
        case 'website':
            citation = `${authorText} (${item.year}) ${item.title}. ${item.websiteOrganization}.`;
            if (item.url) {
                citation += ` Available at: ${item.url}`;
            }
            if (item.lastAccessed) {
                const formattedDate = formatDateHarvard(item.lastAccessed);
                citation += ` (Accessed: ${formattedDate})`;
            }
            break;
            
        case 'report':
            citation = `${authorText} (${item.year}) <em>${item.title}</em>. ${item.publisher}.`;
            if (item.reportNumber) {
                citation += ` Report No. ${item.reportNumber}.`;
            }
            if (item.url) {
                citation += ` Available at: ${item.url}`;
            }
            break;
            
        default:
            citation = `${authorText} (${item.year}) ${item.title}.`;
    }
    
    return citation;
  };

  var generateShortHarvardCitation = function(item) {
    const authors = item.author.split(',');
    let authorText = '';
    
    if (authors.length === 1) {
        authorText = authors[0].trim().split(' ').pop(); // Last name only
    } else if (authors.length === 2) {
        const lastName1 = authors[0].trim().split(' ').pop();
        const lastName2 = authors[1].trim().split(' ').pop();
        authorText = `${lastName1} and ${lastName2}`;
    } else {
        const lastName = authors[0].trim().split(' ').pop();
        authorText = `${lastName} et al.`;
    }
    
    return `${authorText}, ${item.year}`;
  };

  var initializePopovers = function(editor) {
    const mentionElements = editor.getDoc().querySelectorAll('.mention-name');
    
    mentionElements.forEach(el => {
        if (!el._popoverInitialized) {
            let popover = null;
            let popperInstance = null;
            
            el.addEventListener('mouseenter', () => {
                // Create popover element
                popover = editor.getDoc().createElement('div');
                popover.className = 'citation-popover';
                
                // Style the popover
                Object.assign(popover.style, {
                    background: 'white',
                    border: '1px solid var(--border-color, #ccc)',
                    padding: '15px',
                    borderRadius: '6px',
                    boxShadow: '0 4px 6px rgba(0,0,0,0.1)',
                    zIndex: '1000',
                    width: 'auto',
                    maxWidth: '400px',
                    fontSize: '14px',
                    lineHeight: '1.6'
                });
                
                // Get and decode citation content
                const citationContent = decodeURIComponent(el.getAttribute('data-citation'));
                popover.innerHTML = citationContent;
                
                // Add to DOM
                editor.getBody().appendChild(popover);
                
                // Create popper instance if available
                if (typeof Popper !== 'undefined') {
                    popperInstance = Popper.createPopper(el, popover, {
                        placement: 'top',
                        modifiers: [
                            {
                                name: 'offset',
                                options: {
                                    offset: [0, 10],
                                },
                            },
                            {
                                name: 'preventOverflow',
                                options: {
                                    boundary: editor.getBody(),
                                },
                            }
                        ],
                    });
                }
            });
            
            el.addEventListener('mouseleave', () => {
                if (popover) {
                    popover.remove();
                    popover = null;
                }
                if (popperInstance) {
                    popperInstance.destroy();
                    popperInstance = null;
                }
            });
            
            el._popoverInitialized = true;
        }
    });
  };

  var register = function (editor) {
    //console.log('[Mention Plugin] Registering mention plugin');
    
    // Get citation format from editor settings or default to APA
    var citationFormat = editor.getParam('mention.citationFormat', 'apa');
    
    // Select the appropriate citation functions based on format
    var formatCitation, formatShortCitation, formatDate;
    
    if (citationFormat.toLowerCase() === 'harvard') {
      formatCitation = generateHarvardCitation;
      formatShortCitation = generateShortHarvardCitation;
      formatDate = formatDateHarvard;
    } else {
      // Default to APA
      formatCitation = generateAPACitation;
      formatShortCitation = generateShortAPACitation;
      formatDate = formatDateAPA;
    }
    
    editor.on('keypress', function(e) {
      if (e.key === '@') {
        //console.log('[Mention Plugin] @ character detected');
      }
    });

    // Set up mention plugin initialization and popover handling
    editor.on('init', function() {
      // Initialize popovers on initial load
      setTimeout(function() {
        initializePopovers(editor);
      }, 500);
    });

    // Initialize popovers when content changes
    editor.on('NodeChange', function() {
      initializePopovers(editor);
    });
    
    editor.ui.registry.addAutocompleter('mentions', {
      trigger: '@',
      minChars: 0,
      columns: 1,
      fetch: function (pattern) {
        //console.log('[Mention Plugin] Fetch triggered with pattern:', pattern);
        return new Promise(function (resolve) {
          // Use the existing mentionData from AddRemoveTitle.js
          var mentionData = window.mentionData || [];
          //console.log('[Mention Plugin] Available mentionData:', mentionData);
          
          var matchedData = mentionData.filter(function (item) {
            // Search in title and author fields
            var title = item.title || '';
            var author = item.author || '';
            var searchText = (title + ' ' + author).toLowerCase();
            return searchText.indexOf(pattern.toLowerCase()) !== -1;
          });
          
          //console.log('[Mention Plugin] Matched data after filtering:', matchedData);

          var results = matchedData.map(function (item, index) {
            // Store the full item in a temporary object with a unique string ID
            var itemId = 'mention-item-' + index;
            window.mentionItemsCache = window.mentionItemsCache || {};
            window.mentionItemsCache[itemId] = item;
            
            return {
              value: itemId, // Use string ID as value
              text: item.title,
              meta: {
                author: item.author,
                year: item.year,
                type: item.sourceType
              }
            };
          });
          
          //console.log('[Mention Plugin] Final results being sent to autocompleter:', results);
          resolve(results);
        });
      },
      onAction: function (autocompleteApi, rng, value) {
        //console.log('[Mention Plugin] onAction triggered with value:', value);
        // Retrieve the full item from the cache using the string ID
        var fullItem = window.mentionItemsCache && window.mentionItemsCache[value];
        //console.log('[Mention Plugin] Retrieved full item from cache:', fullItem);
        
        if (!fullItem) {
          //console.error('[Mention Plugin] Item not found in cache for ID:', value);
          autocompleteApi.hide();
          return;
        }
        
        // Generate citations using the format-specific functions
        var citation = formatCitation(fullItem);
        var shortCitation = formatShortCitation(fullItem);
        var popoverContent = citation.replace(/"/g, '"');
        
        //console.log('[Mention Plugin] Generated citation:', citation);
        //console.log('[Mention Plugin] Generated short citation:', shortCitation);

        // Create the citation span
        var citationHtml = '<span ' +
          'class="mention-name" ' +
          'contenteditable="false" ' +
          'data-bs-toggle="popover" ' +
          'data-bs-trigger="hover focus" ' +
          'data-bs-html="true" ' +
          'data-citation="' + encodeURIComponent(popoverContent) + '"' +
          '>(' + shortCitation + ')</span>';

        //console.log('[Mention Plugin] Citation HTML to insert:', citationHtml);
        
        editor.selection.setRng(rng);
        editor.insertContent(citationHtml);
        //console.log('[Mention Plugin] Citation inserted into editor');

        // Initialize popovers for the new citation
        setTimeout(function() {
          initializePopovers(editor);
        }, 100);

        autocompleteApi.hide();
      },
      render: function (item) {
        // Create a custom rendering for the autocomplete items
        //console.log('[Mention Plugin] Render function called with item:', item);
        var yearDisplay = item.meta.year;
        
        //console.log('[Mention Plugin] Year display calculated as:', yearDisplay);
        
        var renderResult = {
          type: 'cardmenuitem',
          value: item.value,
          label: item.text,
          items: [
            {
              type: 'cardtext',
              text: item.meta.author + ' (' + yearDisplay + ')'
            },
            {
              type: 'cardtext',
              text: 'Type: ' + item.meta.type
            }
          ]
        };
        
        //console.log('[Mention Plugin] Render result:', renderResult);
        return renderResult;
      }
    });
  };

  var Plugin = function () {
    //console.log('[Mention Plugin] Plugin function called');
    global.add('mention', function (editor) {
      //console.log('[Mention Plugin] Plugin added to editor instance:', editor.id);
      register(editor);
    });
  };

  //console.log('[Mention Plugin] Initializing plugin');
  Plugin();
  //console.log('[Mention Plugin] Plugin initialized');
})();